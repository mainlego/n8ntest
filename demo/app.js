// –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
const CONFIG = {
    n8nWebhookUrl: 'https://n8ntest-uwxt.onrender.com',
    // –†–∞–∑–ª–∏—á–Ω—ã–µ –ø—Ä–æ–∫—Å–∏ –æ–ø—Ü–∏–∏ (–≤—ã–±–µ—Ä–∏—Ç–µ –æ–¥–Ω—É)
    corsProxyOptions: {
        // 1. –ü—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏ (—Ä–∞–±–æ—Ç–∞–µ—Ç —Å–µ–π—á–∞—Å)
        public: 'https://proxy.cors.sh/https://n8ntest-uwxt.onrender.com',
        // 2. –í–∞—à —Å–æ–±—Å—Ç–≤–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –Ω–∞ Render (–ø–æ—Å–ª–µ –¥–µ–ø–ª–æ—è –∑–∞–º–µ–Ω–∏—Ç–µ URL)
        custom: 'https://n8n-cors-proxy-xxxx.onrender.com', // –ó–∞–º–µ–Ω–∏—Ç–µ xxxx –Ω–∞ –≤–∞—à ID
        // 3. –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π –ø—É–±–ª–∏—á–Ω—ã–π –ø—Ä–æ–∫—Å–∏
        alternative: 'https://cors-anywhere.herokuapp.com/https://n8ntest-uwxt.onrender.com'
    },
    currentProxy: 'public', // –ö–∞–∫–æ–π –ø—Ä–æ–∫—Å–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å: 'public', 'custom', 'alternative' –∏–ª–∏ 'none'
    supabaseUrl: 'https://xklameqcsrbvepjecwtn.supabase.co',
    supabaseKey: 'eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6InhrbGFtZXFjc3JidmVwamVjd3RuIiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU3MjE5MTIsImV4cCI6MjA3MTI5NzkxMn0.M82x241D4KgJ3GCKURlRfdr1qWsjLmjrWvzUMIMn9Oc',
    refreshInterval: 5000, // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–∞–∂–¥—ã–µ 5 —Å–µ–∫—É–Ω–¥
    useCorsProxy: true // CORS –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω –¥–ª—è –æ–±—Ö–æ–¥–∞ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Supabase
let supabase = null;
let supabaseEnabled = true; // –í–∫–ª—é—á–∞–µ–º –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é

// –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ Supabase
async function checkSupabaseConnection() {
    if (!supabaseEnabled) return false;
    
    if (typeof window !== 'undefined' && window.supabase && !supabase) {
        supabase = window.supabase.createClient(CONFIG.supabaseUrl, CONFIG.supabaseKey);
    }
    return supabase !== null;
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è Supabase –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü
function enableSupabase() {
    supabaseEnabled = true;
    if (typeof window !== 'undefined' && window.supabase) {
        supabase = window.supabase.createClient(CONFIG.supabaseUrl, CONFIG.supabaseKey);
        addLog('success', 'Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ.');
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ
        document.getElementById('supabaseStatus').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω';
        document.getElementById('enableSupabaseBtn').textContent = '‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω';
        document.getElementById('enableSupabaseBtn').disabled = true;
        
        loadNotifications(); // –ü–µ—Ä–µ–∑–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è CORS –ø—Ä–æ–∫—Å–∏
function toggleCorsProxy() {
    CONFIG.useCorsProxy = !CONFIG.useCorsProxy;
    
    const status = CONFIG.useCorsProxy ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω';
    const btnText = CONFIG.useCorsProxy ? 'üåê CORS –ü—Ä–æ–∫—Å–∏: –í–∫–ª—é—á–µ–Ω' : 'üåê CORS –ü—Ä–æ–∫—Å–∏: –û—Ç–∫–ª—é—á–µ–Ω';
    const btnColor = CONFIG.useCorsProxy ? '#f39c12' : '#95a5a6';
    
    document.getElementById('corsProxyStatus').textContent = status;
    document.getElementById('toggleCorsBtn').textContent = btnText;
    document.getElementById('toggleCorsBtn').style.background = btnColor;
    
    addLog('info', `CORS –ø—Ä–æ–∫—Å–∏ ${status.toLowerCase()}`);
    
    if (CONFIG.useCorsProxy) {
        showAlert('info', `üåê CORS –ø—Ä–æ–∫—Å–∏ –≤–∫–ª—é—á–µ–Ω (${CONFIG.currentProxy}). Webhook –∑–∞–ø—Ä–æ—Å—ã –±—É–¥—É—Ç –ø—Ä–æ—Ö–æ–¥–∏—Ç—å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏.`);
    } else {
        showAlert('warning', '‚ö†Ô∏è CORS –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –ù—É–∂–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å CORS –≤ n8n.');
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ç–∏–ø–∞ –ø—Ä–æ–∫—Å–∏
function switchProxyType(type) {
    if (!['public', 'custom', 'alternative', 'none'].includes(type)) {
        showAlert('error', '‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ç–∏–ø –ø—Ä–æ–∫—Å–∏');
        return;
    }
    
    CONFIG.currentProxy = type;
    
    if (type === 'none') {
        CONFIG.useCorsProxy = false;
        addLog('warning', 'CORS –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω');
        showAlert('warning', '‚ö†Ô∏è CORS –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –¢—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ CORS –≤ n8n.');
    } else {
        CONFIG.useCorsProxy = true;
        const proxyUrl = CONFIG.corsProxyOptions[type];
        addLog('info', `–ü–µ—Ä–µ–∫–ª—é—á–µ–Ω –Ω–∞ ${type} –ø—Ä–æ–∫—Å–∏: ${proxyUrl}`);
        showAlert('success', `‚úÖ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è ${type} –ø—Ä–æ–∫—Å–∏`);
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º UI
    toggleCorsProxy();
    toggleCorsProxy(); // –í—ã–∑—ã–≤–∞–µ–º –¥–≤–∞–∂–¥—ã —á—Ç–æ–±—ã –≤–µ—Ä–Ω—É—Ç—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
}

// –¢–µ—Å—Ç CORS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
async function testCors() {
    addLog('info', '–¢–µ—Å—Ç–∏—Ä—É–µ–º CORS –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ n8n...');
    
    try {
        const response = await fetch(`${CONFIG.n8nWebhookUrl}/healthz`, {
            method: 'GET',
            mode: 'cors'
        });
        
        if (response.ok) {
            addLog('success', '‚úÖ CORS –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ! n8n –¥–æ—Å—Ç—É–ø–µ–Ω.');
            showAlert('success', '‚úÖ CORS —Ä–∞–±–æ—Ç–∞–µ—Ç! –ú–æ–∂–Ω–æ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.');
        } else {
            addLog('warning', `‚ö†Ô∏è n8n –æ—Ç–≤–µ—á–∞–µ—Ç, –Ω–æ —Å—Ç–∞—Ç—É—Å: ${response.status}`);
        }
    } catch (error) {
        if (error.message.includes('CORS')) {
            addLog('error', '‚ùå CORS –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –≤ Render.');
            showAlert('error', '‚ùå CORS –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–º. –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤—ã—à–µ.');
        } else {
            addLog('error', `‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: ${error.message}`);
        }
    }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
window.enableSupabase = enableSupabase;
window.toggleCorsProxy = toggleCorsProxy;
window.testCors = testCors;

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let notifications = [];
let stats = {
    pending: 0,
    sent: 0,
    cancelled: 0,
    total: 0
};

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ
document.addEventListener('DOMContentLoaded', function() {
    initializeApp();
    
    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –¥–∞—Ç—ã –Ω–∞ –∑–∞–≤—Ç—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    const tomorrow = new Date();
    tomorrow.setDate(tomorrow.getDate() + 1);
    document.getElementById('activityDate').value = tomorrow.toISOString().split('T')[0];
    
    // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ñ–æ—Ä–º—ã
    document.getElementById('scheduleForm').addEventListener('submit', handleSchedule);
    
    // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
    setInterval(loadNotifications, CONFIG.refreshInterval);
});

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
async function initializeApp() {
    document.getElementById('webhookUrl').textContent = CONFIG.n8nWebhookUrl;
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Supabase
    if (supabaseEnabled && typeof window !== 'undefined' && window.supabase) {
        supabase = window.supabase.createClient(CONFIG.supabaseUrl, CONFIG.supabaseKey);
        document.getElementById('supabaseStatus').textContent = '–ü–æ–¥–∫–ª—é—á–µ–Ω';
        document.getElementById('enableSupabaseBtn').textContent = '‚úÖ Supabase –ø–æ–¥–∫–ª—é—á–µ–Ω';
        document.getElementById('enableSupabaseBtn').disabled = true;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å CORS –ø—Ä–æ–∫—Å–∏
    const corsStatus = CONFIG.useCorsProxy ? '–í–∫–ª—é—á–µ–Ω' : '–û—Ç–∫–ª—é—á–µ–Ω';
    const corsBtn = CONFIG.useCorsProxy ? 'üåê CORS –ü—Ä–æ–∫—Å–∏: –í–∫–ª—é—á–µ–Ω' : 'üåê CORS –ü—Ä–æ–∫—Å–∏: –û—Ç–∫–ª—é—á–µ–Ω';
    const corsColor = CONFIG.useCorsProxy ? '#f39c12' : '#95a5a6';
    
    document.getElementById('corsProxyStatus').textContent = corsStatus;
    document.getElementById('toggleCorsBtn').textContent = corsBtn;
    document.getElementById('toggleCorsBtn').style.background = corsColor;
    
    loadNotifications();
    addLog('info', '–°–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ì–æ—Ç–æ–≤–∞ –∫ —Ä–∞–±–æ—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏.');
    
    if (!CONFIG.useCorsProxy) {
        addLog('warning', 'CORS –ø—Ä–æ–∫—Å–∏ –æ—Ç–∫–ª—é—á–µ–Ω. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ CORS –≤ n8n –¥–ª—è —Ä–∞–±–æ—Ç—ã webhooks.');
    }
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
async function handleSchedule(e) {
    e.preventDefault();
    
    const formData = {
        id: document.getElementById('userId').value,
        activity_id: document.getElementById('activityId').value,
        activity_date: document.getElementById('activityDate').value,
        activity_time: document.getElementById('activityTime').value,
        activity_url: document.getElementById('activityUrl').value,
        activity_qr: document.getElementById('activityQr').value
    };
    
    showAlert('info', '–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...');
    const startTime = Date.now();
    
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
        let webhookUrl;
        if (CONFIG.useCorsProxy && CONFIG.currentProxy !== 'none') {
            const proxyUrl = CONFIG.corsProxyOptions[CONFIG.currentProxy];
            webhookUrl = `${proxyUrl}/webhook/schedule-notification`;
        } else {
            webhookUrl = `${CONFIG.n8nWebhookUrl}/webhook/schedule-notification`;
        }
            
        const response = await fetch(webhookUrl, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(formData)
        });
        
        const executionTime = Date.now() - startTime;
        const data = await response.json();
        
        if (response.ok && data.success) {
            showAlert('success', `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã! (${executionTime}ms)`);
            addLog('success', `–ó–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${formData.activity_id} (–≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: ${executionTime}ms)`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ Supabase –¥–ª—è –¥–µ–º–æ
            if (supabase) {
                await saveNotificationsToSupabase(formData);
            }
            
            // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Å–æ–±—ã—Ç–∏—è
            const nextId = 'evt_' + Math.random().toString(36).substr(2, 9);
            document.getElementById('activityId').value = nextId;
            document.getElementById('activityUrl').value = `https://example.com/manage/${nextId}`;
            document.getElementById('activityQr').value = `https://example.com/qr/${nextId}.png`;
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
            setTimeout(loadNotifications, 1000);
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ CORS –æ—à–∏–±–∫–∞
        if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
            showAlert('error', `‚ö†Ô∏è –ù–µ —É–¥–∞–µ—Ç—Å—è –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ n8n. –†–∞–±–æ—Ç–∞–µ–º –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.`);
            addLog('warning', `CORS –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞ –∏–ª–∏ n8n –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ò—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ.`);
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ç–æ–ª—å–∫–æ –≤ Supabase –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ
            if (supabase) {
                await saveNotificationsToSupabase(formData);
                showAlert('success', `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ (–¥–µ–º–æ-—Ä–µ–∂–∏–º)`);
                
                // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–æ–≤—ã–π ID
                const nextId = 'evt_' + Math.random().toString(36).substr(2, 9);
                document.getElementById('activityId').value = nextId;
                document.getElementById('activityUrl').value = `https://example.com/manage/${nextId}`;
                document.getElementById('activityQr').value = `https://example.com/qr/${nextId}.png`;
                
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫
                setTimeout(loadNotifications, 1000);
            }
        } else {
            showAlert('error', `‚ùå –û—à–∏–±–∫–∞: ${error.message}`);
            addLog('error', `–û—à–∏–±–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è: ${error.message}`);
        }
    }
}

// –ó–∞–≥—Ä—É–∑–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Supabase
async function loadNotifications() {
    try {
        const supabaseConnected = await checkSupabaseConnection();
        
        if (supabaseConnected && supabase) {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –∏–∑ Supabase
            const { data, error } = await supabase
                .from('scheduled_notifications')
                .select('*')
                .order('scheduled_time', { ascending: true })
                .limit(20);
            
            if (error) {
                console.error('Supabase error:', error);
                if (error.code === 'PGRST205') {
                    addLog('error', '–¢–∞–±–ª–∏—Ü—ã Supabase –Ω–µ —Å–æ–∑–¥–∞–Ω—ã! –°–æ–∑–¥–∞–π—Ç–µ —Ç–∞–±–ª–∏—Ü—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã.');
                    showAlert('error', '‚ùå –¢–∞–±–ª–∏—Ü—ã Supabase –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –°–º. –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—é –ø–æ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ.');
                } else {
                    addLog('error', `–û—à–∏–±–∫–∞ Supabase: ${error.message}`);
                }
                notifications = [];
                updateNotificationsList();
            } else if (data && data.length > 0) {
                notifications = data;
                updateNotificationsList();
                // –ù–µ –ª–æ–≥–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ä–∞–∑ –æ–¥–Ω–æ –∏ —Ç–æ –∂–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
                const currentCount = notifications.length;
                if (!window.lastNotificationCount || window.lastNotificationCount !== currentCount) {
                    addLog('success', `–ó–∞–≥—Ä—É–∂–µ–Ω–æ ${data.length} —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –∏–∑ Supabase`);
                    window.lastNotificationCount = currentCount;
                }
            } else {
                // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –≤ –±–∞–∑–µ
                notifications = [];
                updateNotificationsList();
                if (!window.emptyDataLogged) {
                    addLog('info', '–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø—É—Å—Ç–∞. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!');
                    window.emptyDataLogged = true;
                }
            }
        } else {
            // –ï—Å–ª–∏ Supabase –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω
            notifications = [];
            updateNotificationsList();
            if (!window.supabaseOfflineLogged) {
                addLog('warning', 'Supabase –æ—Ç–∫–ª—é—á–µ–Ω. –í–∫–ª—é—á–∏—Ç–µ Supabase –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –¥–∞–Ω–Ω—ã–º–∏.');
                window.supabaseOfflineLogged = true;
            }
        }
        updateStats();
    } catch (error) {
        console.error('Error loading notifications:', error);
        notifications = [];
        updateNotificationsList();
        updateStats();
        addLog('error', `–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: ${error.message}`);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function updateNotificationsList() {
    const container = document.getElementById('notifications');
    
    let html = '';
    
    if (notifications.length === 0) {
        html = '<div class="notification-item">–ù–µ—Ç –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π. –ó–∞–ø–ª–∞–Ω–∏—Ä—É–π—Ç–µ –ø–µ—Ä–≤–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ!</div>';
    } else {
        notifications.forEach(notification => {
            const typeLabel = notification.notification_type === 'day_before' 
                ? 'üìÖ –ù–∞–∫–∞–Ω—É–Ω–µ –≤ 21:00' 
                : '‚è∞ –ó–∞ 3 —á–∞—Å–∞';
            
            const scheduledDate = new Date(notification.scheduled_time);
            const formattedTime = scheduledDate.toLocaleString('ru-RU');
            
            // –°—Ç–∞—Ç—É—Å –Ω–∞ —Ä—É—Å—Å–∫–æ–º
            const statusLabels = {
                'pending': '–û–∂–∏–¥–∞–µ—Ç',
                'sent': '–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ', 
                'cancelled': '–û—Ç–º–µ–Ω–µ–Ω–æ'
            };
            
            html += `
                <div class="notification-item ${notification.status}">
                    <div style="display: flex; justify-content: space-between; align-items: center;">
                        <div>
                            <strong>${typeLabel}</strong>
                            <div style="color: #666; font-size: 0.9em; margin-top: 5px;">
                                –°–æ–±—ã—Ç–∏–µ: ${notification.activity_id} | –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${notification.user_id}
                            </div>
                            <div style="color: #888; font-size: 0.85em; margin-top: 3px;">
                                –û—Ç–ø—Ä–∞–≤–∫–∞: ${formattedTime}
                            </div>
                            ${notification.sent_at ? `
                                <div style="color: #28a745; font-size: 0.8em; margin-top: 2px;">
                                    –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: ${new Date(notification.sent_at).toLocaleString('ru-RU')}
                                </div>
                            ` : ''}
                        </div>
                        <div>
                            <span class="status-badge status-${notification.status}">
                                ${statusLabels[notification.status] || notification.status}
                            </span>
                            ${notification.status === 'pending' ? `
                                <button class="btn btn-danger" style="margin-left: 10px; padding: 6px 12px; font-size: 12px;" 
                                        onclick="cancelNotification('${notification.activity_id}')">
                                    –û—Ç–º–µ–Ω–∏—Ç—å
                                </button>
                            ` : ''}
                        </div>
                    </div>
                </div>
            `;
        });
    }
    
    container.innerHTML = html;
}

// –û—Ç–º–µ–Ω–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function cancelNotification(activityId) {
    try {
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º URL –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏
        let webhookUrl;
        if (CONFIG.useCorsProxy && CONFIG.currentProxy !== 'none') {
            const proxyUrl = CONFIG.corsProxyOptions[CONFIG.currentProxy];
            webhookUrl = `${proxyUrl}/webhook/cancel-notifications/${activityId}`;
        } else {
            webhookUrl = `${CONFIG.n8nWebhookUrl}/webhook/cancel-notifications/${activityId}`;
        }
            
        const response = await fetch(webhookUrl, {
            method: 'DELETE'
        });
        
        const data = await response.json();
        
        if (response.ok && data.success) {
            showAlert('success', `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã –¥–ª—è ${activityId}`);
            addLog('success', `–û—Ç–º–µ–Ω–µ–Ω—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è —Å–æ–±—ã—Ç–∏—è ${activityId}`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ Supabase
            if (supabase) {
                const { error } = await supabase
                    .from('scheduled_notifications')
                    .update({ status: 'cancelled' })
                    .eq('activity_id', activityId)
                    .eq('status', 'pending');
                
                if (error) {
                    console.error('Error cancelling in Supabase:', error);
                }
            }
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–∫–µ
            notifications.forEach(n => {
                if (n.activity_id === activityId) {
                    n.status = 'cancelled';
                }
            });
            
            updateNotificationsList();
            updateStats();
        } else {
            throw new Error(data.error || '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞');
        }
    } catch (error) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å–ª–∏ —ç—Ç–æ CORS –æ—à–∏–±–∫–∞
        if (error.message.includes('Failed to fetch') || error.message.includes('NetworkError')) {
            showAlert('warning', `‚ö†Ô∏è n8n –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –û—Ç–º–µ–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ.`);
            addLog('warning', `CORS –±–ª–æ–∫–∏—Ä–æ–≤–∫–∞. –û—Ç–º–µ–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ Supabase.`);
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≤ Supabase
            if (supabase) {
                const { error } = await supabase
                    .from('scheduled_notifications')
                    .update({ status: 'cancelled' })
                    .eq('activity_id', activityId)
                    .eq('status', 'pending');
                
                if (!error) {
                    showAlert('success', `‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã –ª–æ–∫–∞–ª—å–Ω–æ`);
                    
                    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –≤ —Å–ø–∏—Å–∫–µ
                    notifications.forEach(n => {
                        if (n.activity_id === activityId) {
                            n.status = 'cancelled';
                        }
                    });
                    
                    updateNotificationsList();
                    updateStats();
                }
            }
        } else {
            showAlert('error', `‚ùå –û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ${error.message}`);
            addLog('error', `–û—à–∏–±–∫–∞ –æ—Ç–º–µ–Ω—ã: ${error.message}`);
        }
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
function updateStats() {
    stats = {
        pending: notifications.filter(n => n.status === 'pending').length,
        sent: notifications.filter(n => n.status === 'sent').length,
        cancelled: notifications.filter(n => n.status === 'cancelled').length,
        total: notifications.length
    };
    
    document.getElementById('statPending').textContent = stats.pending;
    document.getElementById('statSent').textContent = stats.sent;
    document.getElementById('statCancelled').textContent = stats.cancelled;
    document.getElementById('statTotal').textContent = stats.total;
}

// –ü–æ–∫–∞–∑ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
function showAlert(type, message) {
    const alertBox = document.getElementById('alertBox');
    const alertClass = type === 'success' ? 'alert-success' : 
                       type === 'error' ? 'alert-error' : 
                       'alert-info';
    
    alertBox.innerHTML = `<div class="alert ${alertClass}">${message}</div>`;
    
    setTimeout(() => {
        alertBox.innerHTML = '';
    }, 5000);
}

// –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –∑–∞–ø–∏—Å–∏ –≤ –ª–æ–≥
function addLog(type, message) {
    const logsContainer = document.getElementById('logs');
    const timestamp = new Date().toLocaleTimeString('ru-RU');
    const logClass = type === 'success' ? 'log-success' : 
                     type === 'error' ? 'log-error' : 
                     'log-info';
    
    const logEntry = document.createElement('div');
    logEntry.className = `log-entry ${logClass}`;
    logEntry.textContent = `[${timestamp}] ${message}`;
    
    logsContainer.insertBefore(logEntry, logsContainer.firstChild);
    
    // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–ø–∏—Å–µ–π –≤ –ª–æ–≥–µ
    while (logsContainer.children.length > 50) {
        logsContainer.removeChild(logsContainer.lastChild);
    }
}

// –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—Ç–ø—Ä–∞–≤–∫–∞ —É–ø—Ä–∞–≤–ª—è–µ—Ç—Å—è n8n workflow, –∞ –Ω–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–æ–º

// –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Supabase
async function saveNotificationsToSupabase(formData) {
    if (!supabase) return;
    
    try {
        const activityDateTime = new Date(`${formData.activity_date}T${formData.activity_time}`);
        
        // –°–æ–∑–¥–∞–µ–º –¥–≤–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: –Ω–∞–∫–∞–Ω—É–Ω–µ –≤ 21:00 –∏ –∑–∞ 3 —á–∞—Å–∞
        const dayBefore = new Date(activityDateTime);
        dayBefore.setDate(dayBefore.getDate() - 1);
        dayBefore.setHours(21, 0, 0, 0);
        
        const threeHoursBefore = new Date(activityDateTime);
        threeHoursBefore.setHours(threeHoursBefore.getHours() - 3);
        
        const notifications = [
            {
                activity_id: formData.activity_id,
                user_id: formData.id,
                notification_type: 'day_before',
                scheduled_time: dayBefore.toISOString(),
                status: 'pending',
                activity_time: formData.activity_time,
                activity_url: formData.activity_url,
                activity_qr: formData.activity_qr,
                created_at: new Date().toISOString()
            },
            {
                activity_id: formData.activity_id,
                user_id: formData.id,
                notification_type: 'three_hours',
                scheduled_time: threeHoursBefore.toISOString(),
                status: 'pending',
                activity_time: formData.activity_time,
                activity_url: formData.activity_url,
                activity_qr: formData.activity_qr,
                created_at: new Date().toISOString()
            }
        ];
        
        const { data, error } = await supabase
            .from('scheduled_notifications')
            .insert(notifications);
        
        if (error) {
            console.error('Error saving to Supabase:', error);
        } else {
            console.log('Saved to Supabase:', data);
        }
    } catch (error) {
        console.error('Error in saveNotificationsToSupabase:', error);
    }
}

// –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –≤ Supabase
async function updateNotificationStatus(notificationId, status) {
    if (!supabase) return;
    
    try {
        const updateData = { status };
        if (status === 'sent') {
            updateData.sent_at = new Date().toISOString();
        }
        
        const { data, error } = await supabase
            .from('scheduled_notifications')
            .update(updateData)
            .eq('id', notificationId);
        
        if (error) {
            console.error('Error updating status:', error);
        }
    } catch (error) {
        console.error('Error in updateNotificationStatus:', error);
    }
}

// –¢–µ—Å—Ç–æ–≤–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–∏–º—É–ª—è—Ü–∏–∏ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
async function simulateSendNotification(notification) {
    // –§–æ—Ä–º–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ —Å–æ–≥–ª–∞—Å–Ω–æ –¢–ó
    const apiData = {
        client_id: notification.user_id,
        message: `notification_${notification.activity_id}`,
        text: notification.notification_type === 'day_before' 
            ? `–ù–∞–ø–æ–º–∏–Ω–∞–µ–º: –∑–∞–≤—Ç—Ä–∞ –≤ ${notification.activity_time} —É –≤–∞—Å –∑–∞–ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ —Å–æ–±—ã—Ç–∏–µ`
            : `–°–æ–±—ã—Ç–∏–µ –Ω–∞—á–Ω–µ—Ç—Å—è —á–µ—Ä–µ–∑ 3 —á–∞—Å–∞ –≤ ${notification.activity_time}`,
        ...(notification.notification_type === 'day_before' && { button_url: notification.activity_url }),
        ...(notification.notification_type === 'three_hours' && { qr: notification.activity_qr })
    };
    
    console.log('API Request:', apiData);
    
    // –ó–¥–µ—Å—å –±—ã–ª –±—ã —Ä–µ–∞–ª—å–Ω—ã–π API –∑–∞–ø—Ä–æ—Å
    return { success: true, execution_time: Math.floor(Math.random() * 1500) + 500 };
}